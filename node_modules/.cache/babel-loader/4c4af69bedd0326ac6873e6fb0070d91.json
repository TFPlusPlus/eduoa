{"ast":null,"code":"var _jsxFileName = \"/home/cli776/eduoa/src/components/QuestionSetComponent.js\";\nimport React from 'react';\nimport QuestionSetItem from './QuestionSetItem';\nimport root from \"../root\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function QuestionSetComponent({\n  questionSet\n}) {\n  function getFile(event) {\n    let input = event.target;\n    let file = input.files[0];\n    let failCount = 0;\n    let successCount = 0;\n    const reader = new FileReader();\n\n    reader.onload = function (evt) {\n      let text = evt.target.result;\n      let textParts = text.split(\"\\r\\n\");\n\n      for (let i in textParts) {\n        let questionParts = textParts[i].split(\",\");\n\n        if (questionParts.length !== 2) {\n          failCount++;\n        } else {\n          successCount++;\n          fetch(root + \"/AddQuestion\", {\n            method: \"POST\",\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              \"label\": `${questionParts[0]}`,\n              \"answer\": `${questionParts[1]}`,\n              \"quizId\": questionSet.id\n            })\n          });\n        }\n      }\n\n      alert(`Import Complete: ${successCount} ${successCount === 1 ? \"question\" : \"questions\"} successfully imported, ${failCount} ${failCount === 1 ? \"question\" : \"questions\"} failed to import. Refresh the page to see the changes.`);\n    };\n\n    reader.readAsText(file);\n\n    for (let i in questionSet.questions) {\n      fetch(root + `/DeleteQuestionByID/${questionSet.questions[i].id}`, {\n        method: \"POST\"\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"database-question\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info-label\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-label\",\n        children: \"Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-label\",\n        children: \"Difficulty:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-label\",\n        children: \"Length:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-details\",\n        children: questionSet.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-details\",\n        children: questionSet.difficulty\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-details\",\n        children: questionSet.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u3164\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        id: \"label-input\",\n        for: \"input-file\",\n        children: \"Import Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input-file\",\n        type: \"file\",\n        onChange: event => {\n          getFile(event);\n        },\n        accept: \".csv\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Accepted format: CSV (Each line should be one question, with the question and the answer separated by a comma.)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      rules: \"all\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Answer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), questionSet.questions.length === 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : questionSet.questions.map((question, index) => /*#__PURE__*/_jsxDEV(QuestionSetItem, {\n          question: question\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_c = QuestionSetComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionSetComponent\");","map":{"version":3,"sources":["/home/cli776/eduoa/src/components/QuestionSetComponent.js"],"names":["React","QuestionSetItem","root","QuestionSetComponent","questionSet","getFile","event","input","target","file","files","failCount","successCount","reader","FileReader","onload","evt","text","result","textParts","split","i","questionParts","length","fetch","method","headers","body","JSON","stringify","id","alert","readAsText","questions","name","difficulty","map","question","index"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport QuestionSetItem from './QuestionSetItem'\r\nimport root from \"../root\"\r\n\r\nexport default function QuestionSetComponent( {questionSet} ) {\r\n    function getFile(event) {\r\n        let input = event.target\r\n        let file = input.files[0]\r\n        let failCount = 0\r\n        let successCount = 0\r\n        const reader = new FileReader()\r\n        reader.onload = function(evt) {\r\n            let text = evt.target.result\r\n            let textParts = text.split(\"\\r\\n\")\r\n            for (let i in textParts) {\r\n                let questionParts = textParts[i].split(\",\")\r\n                if (questionParts.length !== 2) {\r\n                    failCount++\r\n                } else {\r\n                    successCount++\r\n                    fetch(root + \"/AddQuestion\", {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            \"label\": `${questionParts[0]}`,\r\n                            \"answer\": `${questionParts[1]}`,\r\n                            \"quizId\": questionSet.id\r\n                        })\r\n                    })\r\n                }\r\n            }\r\n            alert(`Import Complete: ${successCount} ${successCount === 1 ? \"question\" : \"questions\"} successfully imported, ${failCount} ${failCount === 1 ? \"question\" : \"questions\"} failed to import. Refresh the page to see the changes.`)\r\n        }\r\n        reader.readAsText(file)\r\n        for (let i in questionSet.questions) {\r\n            fetch(root + `/DeleteQuestionByID/${questionSet.questions[i].id}`, {\r\n                method: \"POST\"\r\n            })\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"database-question\">\r\n            <div className='info-label'>\r\n                <p className='text-label'>Name:</p>\r\n                <p className='text-label'>Difficulty:</p>\r\n                <p className='text-label'>Length:</p>\r\n            </div>\r\n            <div className='info-details'>\r\n                <p className='text-details'>{questionSet.name}</p>\r\n                <p className='text-details'>{questionSet.difficulty}</p>\r\n                <p className='text-details'>{questionSet.length}</p>\r\n            </div>\r\n            <p>ㅤ</p> {/*empty character placed*/}\r\n            <div>\r\n                <label id=\"label-input\" for=\"input-file\">Import Questions</label>\r\n                <input id=\"input-file\" type=\"file\" onChange={(event) => {getFile(event)}} accept=\".csv\" />\r\n                <p>Accepted format: CSV (Each line should be one question, with the question and the answer separated by a comma.)</p>\r\n            </div>\r\n            <table rules=\"all\">\r\n                <tbody>\r\n                    <tr>\r\n                        <th>ID</th>\r\n                        <th>Question</th>\r\n                        <th>Answer</th>\r\n                    </tr>\r\n                    {questionSet.questions.length === 0 ?\r\n                    <></> :\r\n                    questionSet.questions.map((question, index) => (\r\n                        <QuestionSetItem\r\n                            key = {index}\r\n                            question = {question}\r\n                        />\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}