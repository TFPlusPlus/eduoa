{"ast":null,"code":"var _jsxFileName = \"/home/cli776/eduoa/src/components/Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport root from '../root';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Quiz({\n  questionSet,\n  email,\n  qsetId\n}) {\n  _s();\n\n  function createQuestionData(qs) {\n    // generate random answers\n    let questionList = [];\n\n    for (let i in qs) {\n      let q = qs[i];\n      let a = parseInt(q.answer);\n      let options;\n\n      if (isNaN(a)) {\n        a = q.answer;\n        options = [{\n          answerText: a,\n          isCorrect: true\n        }, {\n          answerText: `${a}A`,\n          isCorrect: false\n        }, {\n          answerText: `${a}B`,\n          isCorrect: false\n        }, {\n          answerText: `${a}C`,\n          isCorrect: false\n        }];\n      } else {\n        options = [{\n          answerText: a,\n          isCorrect: true\n        }];\n\n        for (let i = 0; i < 3; i++) {\n          if (Math.random() < 0.5) {\n            options.push({\n              answerText: a + Math.ceil(Math.random() * 10),\n              isCorrect: false\n            });\n          } else {\n            options.push({\n              answerText: a + Math.floor(Math.random() * -10),\n              isCorrect: false\n            });\n          }\n        }\n      }\n\n      let randomizedOptions = [];\n\n      for (let i = 0; i < 4; i++) {\n        let n = Math.floor(Math.random() * (4 - i));\n        randomizedOptions.push(options[n]);\n        options.splice(n, 1);\n      }\n\n      questionList.push({\n        questionText: `${q.question}`,\n        answerOptions: randomizedOptions\n      });\n    }\n\n    return questionList;\n  }\n\n  function getPercentage(s) {\n    let parts = s.split(\"/\");\n    return (parseFloat(parts[0]) / parseFloat(parts[1]) * 100).toFixed(2);\n  }\n\n  const questions = createQuestionData(questionSet.questions);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [newModule, setNewModule] = useState(false);\n\n  const answerBotton = isCorrect => {\n    if (isCorrect === true) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  if (questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"card\",\n        children: \"This question set is empty, please contact your supervisor.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/app\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card\",\n          children: \"Learning Tree\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, questionSet.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (showScore) {\n    fetch(root + \"/AddMark\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"studentEmail\": `${email}`,\n        \"quiz_id\": `${qsetId}`,\n        \"result\": `${score}/${questions.length}`\n      })\n    });\n  }\n\n  if (score / questions.length > 0.8) {\n    fetch(root + `/GetMarkByStudentEmail/${email}`).then(res => res.json()).then(marks => {\n      let passedQuizzes = [qsetId];\n\n      for (let k in marks) {\n        let mark = marks[k];\n\n        if (getPercentage(mark.result) > 0.8 && !(mark.quiz_id in passedQuizzes)) {\n          passedQuizzes.push(mark.quiz_id);\n        }\n      }\n\n      fetch(root + \"/GetAllModules\").then(res => res.json()).then(data => {\n        for (let i in data) {\n          let m = data[i];\n          let quizzes = m.quizs;\n          let pass = true;\n\n          if (m.quizs.length === 0) {\n            pass = false;\n          }\n\n          for (let j in quizzes) {\n            if (passedQuizzes.every(p => parseInt(p) !== quizzes[j].id)) {\n              pass = false;\n            }\n          }\n\n          if (pass) {\n            fetch(root + `/GetNextModuleByCurrentId/${m.id}`).then(res => res.json()).then(data => {\n              let nextModuleIds = [];\n\n              for (let i in data) {\n                let link = data[i];\n\n                if (!(link.nextModule_Id in nextModuleIds)) {\n                  nextModuleIds.push(link.nextModule_Id);\n                }\n              }\n\n              return nextModuleIds;\n            }).then(nextModuleIds => {\n              for (let i in nextModuleIds) {\n                fetch(root + \"/AddProgress\", {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: JSON.stringify({\n                    \"studentEmail\": `${email}`,\n                    \"module_id\": nextModuleIds[i]\n                  })\n                });\n                setNewModule(true);\n              }\n            });\n          }\n        }\n      });\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz\",\n    children: showScore ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"swap-views\",\n      id: \"exit-learning\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"card\",\n        children: [\"Your result is \", score, \"/\", questions.length, \" (\", (parseFloat(score) / parseFloat(questions.length) * 100).toFixed(2), \"%). \", score / questions.length > 0.6 ? \"Good job!\" : \"Try again!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }, this), newModule ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"New module unlocked. Refresh the app for access.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 34\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/app\",\n        className: \"link\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button-details\",\n          children: \"Exit to Learning Tree\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questionNumber\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Question \", currentQuestion + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 25\n        }, this), \"/\", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questionText\",\n        children: questions[currentQuestion].questionText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer\",\n        children: questions[currentQuestion].answerOptions.map((answerOption, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"quizButton\",\n          onClick: () => answerBotton(answerOption.isCorrect),\n          children: answerOption.answerText\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exitQuiz\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/app\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"exitButton\",\n            children: \"Exit to Evaluation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }, this)\n  }, questionSet.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Quiz, \"flnhQy0O+pWAlIlrfNRGZrGdfPo=\");\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["/home/cli776/eduoa/src/components/Quiz.js"],"names":["React","useState","Link","root","Quiz","questionSet","email","qsetId","createQuestionData","qs","questionList","i","q","a","parseInt","answer","options","isNaN","answerText","isCorrect","Math","random","push","ceil","floor","randomizedOptions","n","splice","questionText","question","answerOptions","getPercentage","s","parts","split","parseFloat","toFixed","questions","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","newModule","setNewModule","answerBotton","nextQuestion","length","id","fetch","method","headers","body","JSON","stringify","then","res","json","marks","passedQuizzes","k","mark","result","quiz_id","data","m","quizzes","quizs","pass","j","every","p","nextModuleIds","link","nextModule_Id","map","answerOption","index"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport root from '../root'\r\n\r\nexport default function Quiz( {questionSet, email, qsetId} ) {\r\n    \r\n    function createQuestionData(qs) { // generate random answers\r\n        let questionList = []\r\n        for (let i in qs) {\r\n            let q = qs[i]\r\n            let a = parseInt(q.answer)\r\n            let options\r\n            if (isNaN(a)) {\r\n                a = q.answer\r\n                options = [\r\n                    { answerText: a, isCorrect: true },\r\n                    { answerText: `${a}A`, isCorrect: false },\r\n                    { answerText: `${a}B`, isCorrect: false },\r\n                    { answerText: `${a}C`, isCorrect: false }\r\n                ]\r\n            } else {\r\n                options = [\r\n                    { answerText: a, isCorrect: true }\r\n                ]\r\n                for (let i=0; i<3; i++) {\r\n                    if (Math.random() < 0.5) {\r\n                        options.push({ answerText: a + Math.ceil(Math.random() * 10), isCorrect: false })\r\n                    } else {\r\n                        options.push({ answerText: a + Math.floor(Math.random() * (-10)), isCorrect: false })\r\n                    }\r\n                }\r\n            }\r\n            let randomizedOptions = []\r\n            for (let i=0; i<4; i++) {\r\n                let n = Math.floor(Math.random() * (4 - i))\r\n                randomizedOptions.push(options[n])\r\n                options.splice(n, 1)\r\n            }\r\n            questionList.push({\r\n                questionText: `${q.question}`,\r\n                answerOptions: randomizedOptions\r\n            })\r\n        }\r\n        return questionList\r\n    }\r\n    \r\n    function getPercentage(s) {\r\n        let parts = s.split(\"/\")\r\n        return (parseFloat(parts[0]) / parseFloat(parts[1]) * 100).toFixed(2)\r\n    }\r\n\r\n    const questions = createQuestionData(questionSet.questions)\r\n\r\n    const [currentQuestion, setCurrentQuestion] = useState(0);\r\n    const [showScore, setShowScore] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n    const [newModule, setNewModule] = useState(false)\r\n    const answerBotton = (isCorrect) => {\r\n        if (isCorrect === true) {\r\n            setScore(score + 1);\r\n        }\r\n\r\n        const nextQuestion = currentQuestion + 1;\r\n        if (nextQuestion < questions.length) {\r\n            setCurrentQuestion(nextQuestion);\r\n        } else {\r\n            setShowScore(true);\r\n        }\r\n    };\r\n\r\n    if (questions.length === 0) {\r\n        return (\r\n            <div key={questionSet.id}>\r\n                <p className=\"card\">This question set is empty, please contact your supervisor.</p>\r\n                <Link to=\"/app\">\r\n                    <p className=\"card\">Learning Tree</p>\r\n                </Link>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (showScore) {\r\n        fetch(root + \"/AddMark\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"studentEmail\":`${email}`,\r\n                \"quiz_id\":`${qsetId}`,\r\n                \"result\":`${score}/${questions.length}`\r\n            })\r\n        })\r\n    }\r\n\r\n    if ((score / questions.length) > 0.8) {\r\n        fetch(root + `/GetMarkByStudentEmail/${email}`)\r\n        .then(res => res.json())\r\n        .then(marks => {\r\n            let passedQuizzes = [qsetId]\r\n            for (let k in marks) {\r\n                let mark = marks[k]\r\n                if ((getPercentage(mark.result) > 0.8) && (!(mark.quiz_id in passedQuizzes))) {\r\n                    passedQuizzes.push(mark.quiz_id)\r\n                }\r\n            }\r\n            fetch(root + \"/GetAllModules\")\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                for (let i in data) {\r\n                    let m = data[i]\r\n                    let quizzes = m.quizs\r\n                    let pass = true\r\n                    if (m.quizs.length === 0) {\r\n                        pass = false\r\n                    }\r\n                    for (let j in quizzes) {\r\n                        if (passedQuizzes.every(p => parseInt(p) !== quizzes[j].id)) {\r\n                            pass = false\r\n                        }\r\n                    }\r\n                    if (pass) {\r\n                        fetch(root + `/GetNextModuleByCurrentId/${m.id}`)\r\n                        .then(res => res.json())\r\n                        .then(data => {\r\n                            let nextModuleIds = []\r\n                            for (let i in data) {\r\n                                let link = data[i]\r\n                                if (!(link.nextModule_Id in nextModuleIds)) {\r\n                                    nextModuleIds.push(link.nextModule_Id)\r\n                                }\r\n                            }\r\n                            return nextModuleIds\r\n                        }).then(nextModuleIds => {\r\n                            for (let i in nextModuleIds) {\r\n                                fetch(root + \"/AddProgress\", {\r\n                                    method: \"POST\",\r\n                                    headers: {\r\n                                        \"Content-Type\":\"application/json\"\r\n                                    },\r\n                                    body: JSON.stringify({\r\n                                        \"studentEmail\":`${email}`,\r\n                                        \"module_id\":nextModuleIds[i]\r\n                                    })\r\n                                })\r\n                                setNewModule(true)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"quiz\" key={questionSet.id}>\r\n            {showScore ? (\r\n                <div className=\"swap-views\" id=\"exit-learning\">\r\n                    <h3 className=\"card\">\r\n                        Your result is {score}/{questions.length} ({(parseFloat(score) / parseFloat(questions.length) * 100).toFixed(2)}%). {score/questions.length > 0.6 ? \"Good job!\" : \"Try again!\"}\r\n                    </h3>\r\n                    {newModule ? <p>New module unlocked. Refresh the app for access.</p> : <></>}\r\n                    <Link to=\"/app\" className=\"link\">\r\n                        <button className=\"button-details\">Exit to Learning Tree</button>\r\n                    </Link>\r\n                </div>\r\n            ) : (\r\n                <div className=\"question\">\r\n                    <div className=\"questionNumber\">\r\n                        <span>Question {currentQuestion + 1}</span>/{questions.length}\r\n                    </div>\r\n                    <div className=\"questionText\">\r\n                        {questions[currentQuestion].questionText}\r\n                    </div>\r\n                    <div className=\"answer\">\r\n                        {questions[currentQuestion].answerOptions.map((answerOption, index) => (\r\n                            <button\r\n                                key={index}\r\n                                className=\"quizButton\"\r\n                                onClick={() => answerBotton(answerOption.isCorrect)}\r\n                            >\r\n                                {answerOption.answerText}\r\n                            </button>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"exitQuiz\">\r\n                        <Link to=\"/app\">\r\n                            <button className=\"exitButton\">Exit to Evaluation</button>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n    \r\n"]},"metadata":{},"sourceType":"module"}