{"ast":null,"code":"var _jsxFileName = \"/home/cli776/eduoa/src/components/LearningTree.js\",\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport Tree from \"react-d3-tree\";\nimport { Link } from 'react-router-dom';\nimport { useCallback, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LearningTree = ({\n  modules\n}) => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  function createTreeData(module) {\n    let nextModules = module.nextModules;\n\n    if (nextModules === []) {\n      return {\n        name: `${module.name}`\n      };\n    }\n\n    let childrenList = [];\n\n    for (let i in nextModules) {\n      childrenList.push(createTreeData(nextModules[i]));\n    }\n\n    return {\n      name: `${module.name}`,\n      children: childrenList\n    };\n  }\n\n  const containerStyles = {\n    width: \"80vw\",\n    height: \"70vh\",\n    backgroundColor: \"lightgrey\",\n    margin: \"1% 10%\"\n  };\n\n  const test = n => {// console.log(modules.find(m => m.name === n.name).id);\n  };\n\n  const renderRectSvgNode = ({\n    nodeDatum,\n    toggleNode\n  }) => {\n    var _nodeDatum$attributes;\n\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: `/kp/${modules.find(m => m.name === nodeDatum.name).id}`,\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          r: \"20\",\n          onClick: () => test(nodeDatum)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          fill: \"black\",\n          strokeWidth: \"1\",\n          x: \"0\",\n          y: \"-25\",\n          children: nodeDatum.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), ((_nodeDatum$attributes = nodeDatum.attributes) === null || _nodeDatum$attributes === void 0 ? void 0 : _nodeDatum$attributes.department) && /*#__PURE__*/_jsxDEV(\"text\", {\n        fill: \"black\",\n        x: \"15\",\n        dy: \"15\",\n        strokeWidth: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this);\n  };\n\n  const useCenteredTree = (defaultTranslate = {\n    x: 0,\n    y: 0\n  }) => {\n    _s();\n\n    const [translate, setTranslate] = useState(defaultTranslate);\n    const containerRef = useCallback(containerElem => {\n      if (containerElem !== null) {\n        const {\n          width,\n          height\n        } = containerElem.getBoundingClientRect();\n        setTranslate({\n          x: width / 8,\n          y: height / 2\n        });\n      }\n    }, []);\n    return [translate, containerRef];\n  };\n\n  _s(useCenteredTree, \"bB4wCvStITQR104JxVuMuCsYWi4=\");\n\n  const [translate, containerRef] = useCenteredTree();\n\n  if (modules.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"card\",\n      children: \"No modules to show.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: containerStyles,\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(Tree, {\n      data: createTreeData(modules[0]),\n      translate: translate,\n      renderCustomNodeElement: renderRectSvgNode,\n      orientation: \"horizontal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(LearningTree, \"9B25YRDZ5t4fkTB737Vl0GrOdiQ=\", true);\n\n_c = LearningTree;\nexport default LearningTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"LearningTree\");","map":{"version":3,"sources":["/home/cli776/eduoa/src/components/LearningTree.js"],"names":["React","Tree","Link","useCallback","useState","LearningTree","modules","createTreeData","module","nextModules","name","childrenList","i","push","children","containerStyles","width","height","backgroundColor","margin","test","n","renderRectSvgNode","nodeDatum","toggleNode","find","m","id","attributes","department","useCenteredTree","defaultTranslate","x","y","translate","setTranslate","containerRef","containerElem","getBoundingClientRect","length"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Tree from \"react-d3-tree\";\r\nimport { Link } from 'react-router-dom'\r\nimport { useCallback, useState } from \"react\";\r\n\r\nconst LearningTree = ( {modules} ) => {\r\n\r\n    function createTreeData(module) {\r\n        let nextModules = module.nextModules\r\n        if (nextModules === []) {\r\n            return {name: `${module.name}`}\r\n        }\r\n        let childrenList = []\r\n        for (let i in nextModules) {\r\n            childrenList.push(createTreeData(nextModules[i]))\r\n        }\r\n        return {name: `${module.name}`, children: childrenList}\r\n    }\r\n\r\n    const containerStyles = {\r\n        width: \"80vw\",\r\n        height: \"70vh\",\r\n        backgroundColor: \"lightgrey\",\r\n        margin: \"1% 10%\"\r\n    };\r\n\r\n    const test = (n) => {\r\n        // console.log(modules.find(m => m.name === n.name).id);\r\n    }\r\n\r\n    const renderRectSvgNode = ({ nodeDatum, toggleNode }) => (\r\n        <g>\r\n            <Link to={`/kp/${modules.find(m => m.name === nodeDatum.name).id}`}>\r\n                <circle r=\"20\" onClick={() => test(nodeDatum)} />\r\n                <text fill=\"black\" strokeWidth=\"1\" x=\"0\" y=\"-25\">\r\n                    {nodeDatum.name}\r\n                </text>\r\n            </Link>\r\n            {nodeDatum.attributes?.department && (\r\n                <text fill=\"black\" x=\"15\" dy=\"15\" strokeWidth=\"1\">\r\n                </text>\r\n            )}\r\n        </g>\r\n    );\r\n\r\n    const useCenteredTree = (defaultTranslate = { x: 0, y: 0 }) => {\r\n        const [translate, setTranslate] = useState(defaultTranslate);\r\n        const containerRef = useCallback((containerElem) => {\r\n            if (containerElem !== null) {\r\n                const { width, height } = containerElem.getBoundingClientRect();\r\n                setTranslate({ x: width / 8, y: height / 2 });\r\n            }\r\n        }, []);\r\n        return [translate, containerRef];\r\n    };\r\n\r\n    const [translate, containerRef] = useCenteredTree();\r\n\r\n    if (modules.length === 0) {\r\n        return <h1 className=\"card\">No modules to show.</h1>\r\n    }\r\n    return (\r\n        <div style={containerStyles} ref={containerRef}>       \r\n            <Tree \r\n                data={createTreeData(modules[0])}\r\n                translate={translate}\r\n                renderCustomNodeElement={renderRectSvgNode}\r\n                orientation=\"horizontal\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LearningTree;"]},"metadata":{},"sourceType":"module"}